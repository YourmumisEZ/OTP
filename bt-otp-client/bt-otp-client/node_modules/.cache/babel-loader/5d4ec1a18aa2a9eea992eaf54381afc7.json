{"ast":null,"code":"import * as React from 'react';\nimport request from 'superagent';\nexport default class EnvironmentUtils extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.loadConfigData = () => {\n      return new Promise((resolve, reject) => {\n        request.get(\"/config/config.json\").type(\"json\").accept(\"json\").then(configResponse => resolve(configResponse.body)).catch(err => {\n          reject(err);\n        });\n      });\n    };\n\n    this.getEnviromentalValue = key => {\n      return new Promise((resolve, reject) => {\n        this.loadConfigData().then(res => resolve(res[key])).catch(err => {\n          reject(err);\n        });\n      });\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/YourMuMisEZ/Documents/Visual Studio 2017/Projects/bt-otp-client/src/utilities/Environment.jsx"],"names":["React","request","EnvironmentUtils","Component","loadConfigData","Promise","resolve","reject","get","type","accept","then","configResponse","body","catch","err","getEnviromentalValue","key","res"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,eAAe,MAAMC,gBAAN,SAA+BF,KAAK,CAACG,SAArC,CAA+C;AAAA;AAAA;;AAAA,SAC1DC,cAD0D,GACzC,MAAM;AACnB,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCN,QAAAA,OAAO,CAACO,GAAR,CAAY,qBAAZ,EACKC,IADL,CACU,MADV,EAEKC,MAFL,CAEY,MAFZ,EAGKC,IAHL,CAGUC,cAAc,IAChBN,OAAO,CAACM,cAAc,CAACC,IAAhB,CAJf,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVR,UAAAA,MAAM,CAACQ,GAAD,CAAN;AACH,SAPL;AAQH,OATM,CAAP;AAUH,KAZyD;;AAAA,SAc1DC,oBAd0D,GAclCC,GAAD,IAAS;AAC5B,aAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,aAAKH,cAAL,GAAsBO,IAAtB,CAA2BO,GAAG,IAAIZ,OAAO,CAACY,GAAG,CAACD,GAAD,CAAJ,CAAzC,EACKH,KADL,CACWC,GAAG,IAAI;AACVR,UAAAA,MAAM,CAACQ,GAAD,CAAN;AACH,SAHL;AAIH,OALM,CAAP;AAMH,KArByD;AAAA;;AAAA","sourcesContent":["import * as React from 'react';\r\nimport request from 'superagent';\r\n\r\nexport default class EnvironmentUtils extends React.Component {\r\n    loadConfigData = () => {\r\n        return new Promise((resolve, reject) => {\r\n            request.get(\"/config/config.json\")\r\n                .type(\"json\")\r\n                .accept(\"json\")\r\n                .then(configResponse =>\r\n                    resolve(configResponse.body))\r\n                .catch(err => {\r\n                    reject(err);\r\n                });\r\n        })\r\n    }\r\n\r\n    getEnviromentalValue = (key) => {\r\n        return new Promise((resolve, reject) => {\r\n            this.loadConfigData().then(res => resolve(res[key]))\r\n                .catch(err => {\r\n                    reject(err);\r\n                });\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}